package com.elong.pb.newdda.client.jdbc;

import com.elong.pb.newdda.client.jdbc.adapter.AbstractPreparedStatementAdapter;
import com.elong.pb.newdda.client.router.SqlRouterEngine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by zhangyong on 2016/7/26.
 */
public class ShardingPreparedStatement extends AbstractPreparedStatementAdapter {

    private final static Logger logger = LoggerFactory.getLogger(ShardingPreparedStatement.class);

    private Integer autoGeneratedKeys;

    private int[] columnIndexes;

    private String[] columnNames;

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql) throws SQLException {
        this(shardingConnection, sqlRouterEngine, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        this(shardingConnection, sqlRouterEngine, sql, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        super(shardingConnection, sqlRouterEngine, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql, final int autoGeneratedKeys) throws SQLException {
        this(shardingConnection, sqlRouterEngine, sql);
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql, final int[] columnIndexes) throws SQLException {
        this(shardingConnection, sqlRouterEngine, sql);
        this.columnIndexes = columnIndexes;
    }

    public ShardingPreparedStatement(final ShardingConnection shardingConnection, final SqlRouterEngine sqlRouterEngine, final String sql, final String[] columnNames) throws SQLException {
        this(shardingConnection, sqlRouterEngine, sql);
        this.columnNames = columnNames;
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        return null;
    }

    @Override
    public int executeUpdate() throws SQLException {
        return 0;
    }

    @Override
    public boolean execute() throws SQLException {
        return false;
    }

    @Override
    public void addBatch() throws SQLException {

    }

}
